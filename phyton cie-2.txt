PRACTICAL:9
Aim:Write a python program to display above patterns. 

Code:

#FIRST PATTERN: 
n = 5
for i in range(1, n+1):
    for j in range(1, i + 1):
        print(j, end=' ')
    print('')

#SECOND PATTERN: 
def print_num_pattern(rows):
    num = 1
    for i in range(1, rows+1):
        for j in range(1, i+1):
            print(num, end=" ")
            num += 1
        print()
print_num_pattern(5)

#THIRD PATTERN: 
def print_pyramid(n, current_row=1):
    if current_row > n:
        return
    spaces = n - current_row
    stars = 1 * current_row - 1
    print(" " * spaces + "* " * stars)
    print_pyramid(n, current_row + 1)
n = 6
print_pyramid(n)


#FOURTH PATTERN:
def alphapat(n):
	num = 65
	for i in range(0, n):
		for j in range(0, i+1):
			ch = chr(num)
			print(ch, end=" ")
		num = num + 1
		print("\r")
n = 5
alphapat(n)

OUTPUT:
'c:\Users\nidhi\.vscode\extensions\ms-python.debugpy-2024.4.14446654-.debugpy\launcher' '51516' '--' 'd:\All new photo\py.9.py' 
1                                  
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5
'c:\Users\nidhi\AppData\Local\Microsoft\WindowsApps\python3.11.exe' 'c:\Users\nidhi\.vscode\extensions\ms-python.debugpy-2024.4.14446654-.debugpy\launcher' '55719' '--' 'd:\All new photo\py.9.py' 
1 
2 3
4 5 6
7 8 9 10
11 12 13 14 15
'c:\Users\nidhi\AppData\Local\Microsoft\WindowsApps\python3.11.exe' 'c:\Users\nidhi\.vscode\extensions\ms-python.debugpy-2024.4.14446654-.debugpy\launcher' '55773' '--' 'd:\All new photo\py.9.py' 
    *
   * *
  * * *
 * * * *
* * * * *
'c:\Users\nidhi\AppData\Local\Microsoft\WindowsApps\python3.11.exe' 'c:\Users\nidhi\.vscode\extensions\ms-python.debugpy-2024.4.14446654-.debugpy\launcher' '53595' '--' 'd:\All new photo\py.9.py'
A 
B B
C C C
D D D D
E E E E E




PRACTICAL:10
Aim: Write a python program to demonstrate the use of user-defined functions with single, multiple and   arbitrary arguments.  WAP to design simple calculator 

Code:
def add(a, b):
    return a + b
def subtract(a, b):
    return a - b
def multiply(*numbers):
    result = 1
    for number in numbers:
        result *= number
    return result
def main():
    while True:
        print("Select operation:")
        print("1. Add")
        print("2. Subtract")
        print("3. Multiply")
        print("4. Quit")
        operation = input()
        if operation == "1":
            num1 = float(input("Enter first number: "))
            num2 = float(input("Enter second number: "))
            print(f"{num1} + {num2} = {add(num1, num2)}")
        elif operation == "2":
            num1 = float(input("Enter first number: "))
            num2 = float(input("Enter second number: "))
            print(f"{num1} - {num2} = {subtract(num1, num2)}")
        elif operation == "3":
            num_str = input("Enter numbers separated by space: ")
            numbers = [float(x) for x in num_str.split()]
            print(f"Product of all numbers = {multiply(*numbers)}")
        elif operation == "4":
            break
        else:
            print("Invalid input")
if __name__ == "__main__":
    main()




OUTPUT:

'c:\Users\nidhi\AppData\Local\Microsoft\WindowsApps\python3.11.exe' 'c:\Users\nidhi\.vscode\extensions\ms-python.debugpy-2024.4.14446654-.debugpy\launcher' '55835' '--' 'd:\All new photo\py.10.py'
Select operation:
1. Add
2. Subtract
3. Multiply
4. Quit
1
Enter first number: 3
Enter second number: 4
3.0 + 4.0 = 7.0




























PRACTICAL:11
Aim: Create a class named employee having attributes - emp_name, emp_age, and emp_city. Create a method named get_data() in employee class that takes user input for these attributes. Derive a class named emp_derived() from the employee class, having an __init__() method that displays the attributes of the employee class upon instantiation. 

Code:

class employee:
    def __init__(self):
        self.emp_name = None
        self.emp_age = None
        self.emp_city = None
    def get_data(self):
        self.emp_name = input("Enter employee name: ")
        self.emp_age = int(input("Enter employee age: "))
        self.emp_city = input("Enter employee city: ")
class emp_derived(employee):
    def __init__(self):
        super().__init__()
        self.display_data()
    def display_data(self):
        print(f"Employee name: {self.emp_name}")
        print(f"Employee age: {self.emp_age}")
        print(f"Employee city: {self.emp_city}")
emp = emp_derived()
emp.get_data()


OUTPUT:

'c:\Users\nidhi\AppData\Local\Microsoft\WindowsApps\python3.11.exe' 'c:\Users\nidhi\.vscode\extensions\ms-python.debugpy-2024.4.14446654-.debugpy\launcher' '55877' '--' 'd:\All new photo\py.11.py' 
Employee name: None
Employee age: None
Employee city: None
Enter employee name: nidhi
Enter employee age: 19
Enter employee city: surat





PRACTICAL:12
Aim: Write a python program to show the need of inheritance and encapsulation. 
The display() method that prints class attribute values along with attributes of its super class. 

Code:

class Animal:
    def __init__(self, species):
        self._species = species
    def display_species(self):
        print(f"Species: {self._species}")
class Mammal(Animal):
    def __init__(self, species, num_legs):
        super().__init__(species)
        self._num_legs = num_legs
    def display_num_legs(self):
        print(f"Number of legs: {self._num_legs}")
    def display(self):
        self.display_species()
        self.display_num_legs()
class Cat(Mammal):
    def __init__(self, name, species, num_legs):
        super().__init__(species, num_legs)
        self._name = name
    def display_name(self):
        print(f"Name: {self._name}")
    def display(self):
        self.display_name()
        super().display()
cat = Cat("Whiskers", "Domestic cat", 4)
cat.display()

OUTPUT:

'c:\Users\nidhi\AppData\Local\Microsoft\WindowsApps\python3.11.exe' 'c:\Users\nidhi\.vscode\extensions\ms-python.debugpy-2024.4.14446654-.debugpy\launcher' '56945' '--' 'd:\All new photo\py.12.py' 
Name: Whiskers
Species: Domestic cat
Number of legs: 4




PRACTICAL:13
Aim: Write a python program to create a class named area. Define a class method find_area() that can find areas of different shapes whose value is given by the user. Invoke the class method by instantiation and prove method overloading. 

Code:

class Area:
    @classmethod
    def find_area(cls, shape, dimensions):
        if shape == "circle":
            radius = dimensions["radius"]
            area = 3.14 * (radius ** 2)
            return area
        elif shape == "rectangle":
            length = dimensions["length"]
            width = dimensions["width"]
            area = length * width
            return area
        elif shape == "triangle":
            base = dimensions["base"]
            height = dimensions["height"]
            area = 0.5 * base * height
            return area
        else:
            raise ValueError("Invalid shape")
circle_dim = {"radius": 5}
rectangle_dim = {"length": 6, "width": 4}
triangle_dim = {"base": 5, "height": 6}
circle_area = Area.find_area("circle", circle_dim)
rectangle_area = Area.find_area("rectangle", rectangle_dim)
triangle_area = Area.find_area("triangle", triangle_dim)
print("Circle area: ", circle_area)
print("Rectangle area: ", rectangle_area)
print("Triangle area: ", triangle_area)

OUTPUT:

'c:\Users\nidhi\AppData\Local\Microsoft\WindowsApps\python3.11.exe' 'c:\Users\nidhi\.vscode\extensions\ms-python.debugpy-2024.4.14446654-.debugpy\launcher' '56971' '--' 'd:\All new photo\py.13.py' 
Circle area:  78.5
Rectangle area:  24
Triangle area:  15.0

PRACTICAL:14
Aim: Write a python program to demonstrate the use of method overriding 
Code:

class Animal:
    def speak(self):
        return "The animal makes a sound"
class Dog(Animal):
    def speak(self):
        return "The dog barks"
class Cat(Animal):
    def speak(self):
        return "The cat meows"
dog = Dog()
cat = Cat()
print("Dog speaks: ", dog.speak())
print("Cat speaks: ", cat.speak())
parent_speak = Animal()
print("Parent speaks: ", parent_speak.speak())

OUTPUT:

'c:\Users\nidhi\AppData\Local\Microsoft\WindowsApps\python3.11.exe' 'c:\Users\nidhi\.vscode\extensions\ms-python.debugpy-2024.4.14446654-.debugpy\launcher' '56999' '--' 'd:\All new photo\py.14.py' 
Dog speaks:  The dog barks
Cat speaks:  The cat meows
Parent speaks:  The animal makes a sound











PRACTICAL:15
Aim: Write a python program to perform basic matrix operations on user entered matrices. 
Code:

class Matrix:
    def __init__(self, rows, cols):
        self.rows = rows
        self.cols = cols
        self.matrix = [[0 for _ in range(cols)] for _ in range(rows)]
    def get_input(self):
        for i in range(self.rows):
            for j in range(self.cols):
                val = int(input(f"Enter value for row {i+1} and col {j+1}: "))
                self.matrix[i][j] = val
    def display(self):
        for i in range(self.rows):
            for j in range(self.cols):
                print(self.matrix[i][j], end=" ")
            print()
    def add_matrices(self, mat2):
        if self.rows != mat2.rows or self.cols != mat2.cols:
            raise ValueError("Matrices cannot be added")
        result = Matrix(self.rows, self.cols)
        for i in range(self.rows):
            for j in range(self.cols):
                result.matrix[i][j] = self.matrix[i][j] + mat2.matrix[i][j]
        return result
matrix1 = Matrix(2, 3)
matrix1.get_input()
matrix2 = Matrix(2, 3)
matrix2.get_input()
result = matrix1.add_matrices(matrix2)
print("Matrix 1:")
matrix1.display()
print("Matrix 2:")
matrix2.display()
print("Result of matrix addition:")
result.display()







OUTPUT:

'c:\Users\nidhi\AppData\Local\Microsoft\WindowsApps\python3.11.exe' 'c:\Users\nidhi\.vscode\extensions\ms-python.debugpy-2024.4.14446654-.debugpy\launcher' '57042' '--' 'd:\All new photo\py.15.py' 
Enter value for row 1 and col 1: 1
Enter value for row 1 and col 2: 2
Enter value for row 1 and col 3: 3
Enter value for row 2 and col 1: 4
Enter value for row 2 and col 2: 5
Enter value for row 2 and col 3: 6
Enter value for row 1 and col 1: 7
Enter value for row 1 and col 2: 8
Enter value for row 1 and col 3: 9
Enter value for row 2 and col 1: 2
Enter value for row 2 and col 2: 3
Enter value for row 2 and col 3: 4
Matrix 1:
1 2 3
4 5 6
Matrix 2:
7 8 9
2 3 4
Result of matrix addition:
8 10 12
6 8 10

